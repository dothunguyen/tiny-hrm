{"version":3,"sources":["components/employee.jsx","App.js","serviceWorker.js","index.js"],"names":["Employee","value","className","map","me","App","state","employees","organisation","Promise","all","fetch","then","res1","res2","json","data1","data2","setState","catch","console","log","this","e","name","id","managerId","class","i","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4OAqBeA,EAnBE,SAAXA,EAAY,GAAa,IAAZC,EAAW,EAAXA,MACjB,OACE,wBAAKC,UAAU,QACb,4BAAKD,EAAK,MACa,MAAtBA,EAAK,WACJ,4BACE,wBAAIC,UAAU,QACbD,EAAK,UAAcE,KAAI,SAACC,GAAD,OACpB,4BACE,kBAACJ,EAAD,CAAUC,MAAOG,YCuFlBC,G,kBA3Fb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,UAAW,GACXC,aAAc,MAJJ,E,iFAQO,IAAD,OAClBC,QAAQC,IAAI,CACVC,MAAM,sBACNA,MAAM,2BAEPC,MAAK,mCAAEC,EAAF,KAAQC,EAAR,YAAkBL,QAAQC,IAAI,CAACG,EAAKE,OAAQD,EAAKC,YACtDH,MAAK,YAAqB,IAAD,mBAAlBI,EAAkB,KAAXC,EAAW,KACtB,EAAKC,SAAS,CAAEX,UAAWS,EAAOR,aAAcS,OAEnDE,MAAMC,QAAQC,O,+BAIf,OACE,yBAAKnB,UAAU,WACb,yBAAKA,UAAU,SACb,kDACA,2BAAOA,UAAU,qDACf,+BACE,6CACA,2CACA,2CAEF,+BACCoB,KAAKhB,MAAMC,UAAUJ,KAAI,SAACoB,GAAD,OACxB,4BACE,4BAAKA,EAAEC,MACP,4BAAKD,EAAEE,IACP,4BAAKF,EAAEG,kBAMf,yBAAKxB,UAAU,wBACb,iDAC4B,MAA3BoB,KAAKhB,MAAME,cACV,yBAAKmB,MAAM,UACX,wBAAIA,MAAM,aAAV,qBACA,6BACEL,KAAKhB,MAAME,aAAX,YAAuCL,KAAI,SAACoB,GAAD,OACxC,kBAAC,EAAD,CAAUtB,MAAOsB,QAKK,MAA3BD,KAAKhB,MAAME,cAAkE,MAA1Cc,KAAKhB,MAAME,aAAX,aACjC,yBAAKmB,MAAM,UACX,wBAAIA,MAAM,aAAV,eACA,6BACEL,KAAKhB,MAAME,aAAX,YAAuCL,KAAI,SAACoB,GAAD,OAC3C,kBAAC,EAAD,CAAUtB,MAAOsB,QAIM,MAA3BD,KAAKhB,MAAME,cAAuE,MAA/Cc,KAAKhB,MAAME,aAAX,kBACjC,yBAAKmB,MAAM,UACX,wBAAIA,MAAM,aAAV,0CACA,6BACEL,KAAKhB,MAAME,aAAX,iBAA4CL,KAAI,SAACoB,GAAD,OAChD,kBAAC,EAAD,CAAUtB,MAAOsB,QAIO,MAA3BD,KAAKhB,MAAME,cAA8D,MAAtCc,KAAKhB,MAAME,aAAX,SAClC,yBAAKmB,MAAM,UACX,wBAAIA,MAAM,aAAV,+CACA,6BACEL,KAAKhB,MAAME,aAAX,QAAmCL,KAAI,SAACoB,GAAD,OACvC,yBAAKI,MAAM,UACRJ,EAAEpB,KAAI,SAACyB,GAAD,OACL,kBAAC,EAAD,CAAU3B,MAAO2B,kB,GAjFnBC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,iB","file":"static/js/main.e68a21eb.chunk.js","sourcesContent":["import React from 'react'\n\nconst Employee = ({value}) => {\n  return (\n    <ul  className=\"tree\">\n      <li>{value['name']}</li>\n      {value['managerOf'] != null &&\n        <li>\n          <ul className=\"tree\">\n          {value['managerOf'].map((me) => (\n              <li >\n                <Employee value={me} />\n              </li>\n          ))}\n          </ul>\n        </li>\n      }\n    </ul>\n  )\n};\n\nexport default Employee","import React, { Component } from 'react';\nimport './components/employee';\nimport './App.css';\nimport Employee from './components/employee';\n\nclass App extends Component {\n  \n  constructor() {\n    super();\n    this.state = {\n      employees: [],\n      organisation: null,\n    };\n  }\n\n  componentDidMount() {\n    Promise.all([\n      fetch('/api/v1/employees/'),\n      fetch('/api/v1/employees/org')\n    ])\n    .then(([res1, res2]) => Promise.all([res1.json(), res2.json()]))\n    .then(([data1, data2]) => {\n        this.setState({ employees: data1, organisation: data2 })\n    })\n    .catch(console.log)\n  }\n\n  render() {\n    return (\n      <div className=\"App row\">\n        <div className=\"col-6\">\n          <h3>Employee Directory</h3>\n          <table className=\"table table-striped table-responsive-md btn-table\">\n            <thead>\n              <th>Employee Name</th>\n              <th>Employee ID</th>\n              <th>Manager ID</th>\n            </thead>\n            <tbody>\n            {this.state.employees.map((e) => (\n              <tr>\n                <td>{e.name}</td>\n                <td>{e.id}</td>\n                <td>{e.managerId}</td>\n              </tr>\n            ))}\n            </tbody>\n          </table>\n        </div> \n        <div className=\"col-6 list-container\">\n          <h3>Hierarchical View</h3>\n          {this.state.organisation != null &&\n            <div class=\"border\">\n            <h5 class=\"pt-3 pl-3\">Managed Employees</h5>\n            <hr/>\n            { this.state.organisation['topmanagers'].map((e) => (\n                 <Employee value={e}/> \n              ))\n            }\n            </div>\n          }\n          { this.state.organisation != null && this.state.organisation['freelancers'] != null &&\n              <div class=\"border\">\n              <h5 class=\"pt-3 pl-3\">Freelancers</h5>\n              <hr/>\n              { this.state.organisation['freelancers'].map((e) => (\n                <Employee value={e}/> \n              ))}\n              </div>\n          }\n           {this.state.organisation != null && this.state.organisation['managedByUnknown'] != null &&\n              <div class=\"border\">\n              <h5 class=\"pt-3 pl-3\">Managed By Unkown (Invalid Manager Id)</h5>\n              <hr/>\n              { this.state.organisation['managedByUnknown'].map((e) => (\n                <Employee value={e}/> \n              ))}\n              </div>\n            }\n            {this.state.organisation != null && this.state.organisation['circles'] != null &&\n              <div class=\"border\">\n              <h5 class=\"pt-3 pl-3\">Circles of Management (a ->b, b->c, c -> a)</h5>\n              <hr/>\n              { this.state.organisation['circles'].map((e) => (\n                <div class=\"border\">\n                  {e.map((i) => (\n                    <Employee value={i}/>\n                  ))} \n                </div>\n              ))}\n              </div>\n            }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}